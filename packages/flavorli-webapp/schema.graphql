directive @cacheControl(
  maxAge: Int
  scope: CacheControlScope
) on FIELD_DEFINITION | OBJECT | INTERFACE

enum CacheControlScope {
  PUBLIC
  PRIVATE
}

type Cookbook {
  id: String!
  name: String!
  recipes: [Recipe!]!
}

type Image {
  src: String!
  alt: String
}

input ImageInput {
  src: String
  alt: String
}

type Ingredient {
  for: String
  list: [IngredientItem]
}

input IngredientInput {
  qty: String!
  name: String!
  notes: String
  link: String
}

type IngredientItem {
  qty: String
  name: String
  notes: String
  link: String
}

type Item {
  qty: String
  name: String
  notes: String
  link: String
}

input ItemInput {
  qty: String!
  name: String!
  notes: String
  link: String
}

type Link {
  name: String!
  from: Int!
  timerId: String
}

input LinkInput {
  heading: String
  name: String!
  from: Int!
  timerId: String
}

type Mutation {
  createRecipe(recipe: RecipeInput!): Recipe!
}

type Query {
  user(id: String!): User!
  recipes: [Recipe!]!
  recipe(id: String!): Recipe!
}

type Recipe {
  id: String
  author: String
  createdAt: String
  name: String
  image: String
  video: String
  preparationTime: Int
  cookingTime: Int
  portions: String
  difficulty: String
  notes: [String]
  ingredients: [Ingredient]
  items: [Item]
  steps: [Step]
}

input RecipeInput {
  name: String!
  image: String
  preparationTime: Int
  cookingTime: Int
  portions: String
  difficulty: String
  ingredients: [IngredientInput]
  items: [ItemInput]
  steps: [StepInput]
  notes: [String]
}

type schema {
  query: Query
  mutation: Mutation
}

type Step {
  for: String
  heatLevel: String
  ovenTemperature: String
  links: [Link]
  tasks: [Task]
  notes: [String]
  images: [Image]
  video: String
}

input StepInput {
  no: Int
  type: StepType!
  links: [LinkInput]
  tag: TagInput
  items: [ItemInput]
  ingredients: [IngredientInput]
  tasks: [TaskInput]
  images: [ImageInput]
  timer: TimerInput
}

enum StepType {
  MISE_EN_PLACE
  PREPARATION
}

input TagInput {
  text: String!
  color: String!
}

type Task {
  name: String!
  notes: [String]
  timer: Timer
}

input TaskInput {
  name: String!
  notes: [String]
}

type Timer {
  id: String!
  name: String!
  minutes: Int!
  seconds: Int!
}

input TimerInput {
  id: String!
  name: String!
  minutes: Int!
  seconds: Int!
}

type User {
  id: String!
  createdAt: String!
  firstName: String
  lastName: String
  email: String
  cookbooks: [Cookbook!]!
}
